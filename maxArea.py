# THE PROBLEM STATEMENT IS TO RETURN CONTAINER AREA WHICH CAN CONTAIN THE MOST WATER. THE HEIGHT ARRAY CONTAINS THE HEIGHT OF EACH SIDE OF THE CONTAINER.
# I.E. height = [1,2,1]
#   |
# | | | 
# AREA = 2
# THE GIVEN HEIGHT ARRAYB SHOULD BE REPRESENTED AS ABOVE, THEN WE HAVE TO SEARCH FOR TWO POLES WHICH FORMS A CONTAINER THAT CAN CONTAIN MOST WATER.
# IN THIS CASE, THE LAST AND THE FIRST POLE CAN CONTAIN MOST WATER. THEIR AREA IS CALCULATED AS DIFFERENCE BETWEEN TWO POLES INDICES TIMES THE MINIMUM HEIGHT BETWEEN
# BOTH THE POLES.

# MY APPROACH IS TO USE THE TWO POINTER APPROACH. TRAVERSE THE ARRAY USING A LEFT AND A RIGHT POINTER THEN AT EACH INDEX, CHECK FOR THE CONTAINERS AREA ALSO
# CHECK IF THE CONTAINERS AREA IS GREATER THAN MAXLIMIT IF IT IS THEN ASSIGN THE VALUE OF CONTAINERS AREA TO MAXLIMIT. THEN CHECK WHICH POINTERS VALUE IS LESSER,
# THEN INCREMNET OR DECREMENT IT ACCORDINGLY.

class Solution:
    def maxArea(self, height: List[int]) -> int:
        l = 0
        r = len(height)-1
        maxLimit = 0
        
         # TRAVERSING USING TWO POINTER APPROACH.
        while(l < r):
            limit = (r-l)*min(height[l],height[r])
            
            if(limit > maxLimit):
                maxLimit = limit
                
            if(height[l] <= height[r]):
                l += 1
            else:
                r -= 1
        
        return maxLimit
      
# TIME COMPLEXITY : O(N)
# SPACE COMPLEXITY : O(1)
